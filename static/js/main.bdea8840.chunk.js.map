{"version":3,"sources":["NameList.js","UserName.js","EmailList.js","Address.js","PhoneList.js","WebsiteList.js","Company.js","App.js","serviceWorker.js","index.js"],"names":["NameList","props","useState","user","name","setName","editMode","setEditMode","style","display","type","value","onChange","e","target","className","onClick","saveEdited","id","marginLeft","width","height","viewBox","fill","xmlns","fillRule","d","UserName","username","setUsername","EmailList","email","setEmail","Address","address","setAddress","changeGeo","geo","street","autoFocus","suite","city","zipcode","lat","lng","onDoubleClick","PhoneList","phone","setPhone","WebsiteList","website","setWebsite","Company","company","catchPhrase","bs","App","users","setUsers","userId","editedUser","editedUsers","map","console","log","axios","method","url","then","response","data","length","scope","key","columnName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bdea8840.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\n\nfunction NameList(props) {\n    const [name, setName] = useState(props.user.name);\n    const [editMode, setEditMode] = useState(false)\n\n    const onEditMode = () => {\n        setName(props.user.name);\n        setEditMode(true);\n    }\n    const saveButtonClick = () => {\n        props.saveEdited(props.user.id, {...props.user, name: name});\n        setEditMode(false);\n    };\n\n    const cancelButtonClick = () => {\n        setEditMode(false);\n    }\n\n\n    return (\n\n            !editMode ?\n                <div style={{display: 'flex'}}>\n                    {props.user.name}\n\n                    <button className=\"btn btn-sm float-right\"\n                            style={{marginLeft: \"auto\"}}\n                            onClick={onEditMode}>\n\n                        <svg className=\"bi bi-pencil\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                             xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fillRule=\"evenodd\"\n                                  d=\"M11.293 1.293a1 1 0 0 1 1.414 0l2 2a1 1 0 0 1 0 1.414l-9 9a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z\"/>\n                            <path fillRule=\"evenodd\"\n                                  d=\"M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 0 0 .5.5H4v.5a.5.5 0 0 0 .5.5H5v.5a.5.5 0 0 0 .5.5H6v-1.5a.5.5 0 0 0-.5-.5H5v-.5a.5.5 0 0 0-.5-.5H3z\"/>\n                        </svg>\n                    </button>\n                </div>\n                :\n                <div style={{display: \"flex\"}}>\n                    <input type=\"text\"\n                           value={name}\n                           onChange={e => setName(e.target.value)}/>\n\n                    <button className=\"btn btn-sm float-right\"\n                            onClick={saveButtonClick}> ✅ </button>\n\n                    <button className=\"btn btn-sm float-right\"\n                            onClick={cancelButtonClick}> ❎ </button>\n\n                </div>\n\n\n\n\n    );\n}\n\nexport default NameList;\n","import React, {useState} from 'react';\n\n\nfunction UserName(props) {\n    const [username, setUsername] = useState(props.user.username);\n    const [editMode, setEditMode] = useState(false)\n\n    const onEditMode = () => {\n        setUsername(props.user.username);\n        setEditMode(true);\n    };\n    const saveButtonClick = () => {\n        props.saveEdited(props.user.id, {...props.user, username: username});\n        setEditMode(false);\n    };\n\n    const cancelButtonClick = () => {\n        setEditMode(false);\n    }\n\n    return (\n\n        !editMode ?\n            <div style={{display: 'flex'}}>\n                {props.user.username}\n\n                <button className=\"btn btn-sm float-right\"\n                        style={{marginLeft: \"auto\"}}\n                        onClick={onEditMode}>\n\n                    <svg className=\"bi bi-pencil\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                         xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\"\n                              d=\"M11.293 1.293a1 1 0 0 1 1.414 0l2 2a1 1 0 0 1 0 1.414l-9 9a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z\"/>\n                        <path fillRule=\"evenodd\"\n                              d=\"M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 0 0 .5.5H4v.5a.5.5 0 0 0 .5.5H5v.5a.5.5 0 0 0 .5.5H6v-1.5a.5.5 0 0 0-.5-.5H5v-.5a.5.5 0 0 0-.5-.5H3z\"/>\n                    </svg>\n                </button>\n            </div>\n            :\n            <div style={{display: \"flex\"}}>\n                <input type=\"text\"\n                       value={username}\n                       onChange={e => setUsername(e.target.value)}/>\n\n                <button className=\"btn btn-sm float-right\"\n                        onClick={saveButtonClick}> ✅\n                </button>\n\n                <button className=\"btn btn-sm float-right\"\n                        onClick={cancelButtonClick}> ❎\n                </button>\n\n            </div>\n    );\n}\n\nexport default UserName;\n","import React, {useState} from 'react';\n\n\nfunction EmailList (props) {\n\n\n    const [editMode, setEditMode] = useState(false)\n    const [email, setEmail] = useState(props.user.email);\n\n\n    const onEditMode = () => {\n        setEmail(props.user.email);\n        setEditMode(true);\n    }\n    const saveButtonClick = () => {\n        props.saveEdited(props.user.id, {...props.user, email: email});\n        setEditMode(false);\n    };\n\n    const cancelButtonClick = () => {\n        setEditMode(false);\n    }\n\n\n\n\n\n\n    return (\n\n            !editMode ?\n                <div style={{display: 'flex'}}>\n                    {props.user.email}\n\n                    <button className=\"btn btn-sm float-right\"\n                            style={{marginLeft: \"auto\"}}\n                            onClick={onEditMode}>\n\n                        <svg className=\"bi bi-pencil\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                             xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fillRule=\"evenodd\"\n                                  d=\"M11.293 1.293a1 1 0 0 1 1.414 0l2 2a1 1 0 0 1 0 1.414l-9 9a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z\"/>\n                            <path fillRule=\"evenodd\"\n                                  d=\"M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 0 0 .5.5H4v.5a.5.5 0 0 0 .5.5H5v.5a.5.5 0 0 0 .5.5H6v-1.5a.5.5 0 0 0-.5-.5H5v-.5a.5.5 0 0 0-.5-.5H3z\"/>\n                        </svg>\n                    </button>\n                </div>\n                :\n                <div style={{display: \"flex\"}}>\n                    <input type=\"text\"\n                           value={email}\n                           onChange={e => setEmail(e.target.value)}/>\n\n                    <button className=\"btn btn-sm float-right\"\n                            onClick={saveButtonClick}> ✅ </button>\n\n                    <button className=\"btn btn-sm float-right\"\n                            onClick={cancelButtonClick}> ❎ </button>\n\n                </div>\n\n\n\n\n\n    );\n}\n\nexport default EmailList;\n","import React, {useState} from 'react';\n\n\nconst editPen = <svg className=\"bi bi-pencil\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                     xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\"\n          d=\"M11.293 1.293a1 1 0 0 1 1.414 0l2 2a1 1 0 0 1 0 1.414l-9 9a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z\"/>\n    <path fillRule=\"evenodd\"\n          d=\"M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 0 0 .5.5H4v.5a.5.5 0 0 0 .5.5H5v.5a.5.5 0 0 0 .5.5H6v-1.5a.5.5 0 0 0-.5-.5H5v-.5a.5.5 0 0 0-.5-.5H3z\"/>\n</svg>\n\n\nfunction Address(props) {\n\n    const [editMode, setEditMode] = useState(false)\n    const [address, setAddress] = useState({});\n\n\n    const onEditMode = () => {\n        setAddress(props.user.address);\n        setEditMode(true);\n    }\n    const saveButtonClick = () => {\n        props.saveEdited(props.user.id, {...props.user, address: address});\n        setEditMode(false);\n    };\n\n    const cancelButtonClick = () => {\n        setEditMode(false);\n    }\n    const changeStreet = (e) => {\n        setAddress({...address, street: e.target.value})\n    }\n    const changeSuite = (e) => {\n        setAddress({...address, suite: e.target.value})\n    }\n\n    const changeCity = (e) => {\n        setAddress({...address, city: e.target.value})\n    }\n\n    const changeZip = (e) => {\n        setAddress({...address, zipcode: e.target.value})\n    }\n    const changeGeo = (e) => {\n        setAddress({...address, geo: e.target.value})\n    }\n\n\nreturn (\n\n    <div>\n\n        {editMode ?\n\n            <div className='form-group'>\n\n                <label>Street</label>\n                <input type=\"text\" className=\"form-control\" id=\"formControlInput2\"\n                       value={address.street}\n                       onChange={changeStreet} autoFocus=\"true\"/>\n\n                <label>Suite</label>\n                <input type=\"text\" className=\"form-control\" id=\"formControlInput1\"\n                       value={address.suite}\n                       onChange={changeSuite} autoFocus=\"true\"/>\n\n\n                <label>City</label>\n                <input type=\"text\" className=\"form-control\" id=\"formControlInput1\"\n                       value={address.city}\n                       onChange={changeCity} autoFocus=\"true\"/>\n\n                <label>Zip</label>\n                <input type=\"text\" className=\"form-control\" id=\"formControlInput1\"\n                       value={address.zipcode}\n                       onChange={changeZip} autoFocus=\"true\"/>\n\n                <label>Geo</label>\n                <input type=\"text\" className=\"form-control\" id=\"formControlInput1\"\n                       value={address.geo.lat}\n                       onChange={changeGeo} autoFocus=\"true\"/>\n                <input type=\"text\" className=\"form-control\" id=\"formControlInput1\"\n                       value={address.geo.lng}\n                       onChange={changeGeo} autoFocus=\"true\"/>\n\n                {/*<button className=\"btn btn-sm float-right\"*/}\n                {/*        onClick={saveButtonClick}> ✅*/}\n                {/*</button>*/}\n\n                {/*<button className=\"btn btn-sm float-right\"*/}\n                {/*        onClick={cancelButtonClick}> ❎*/}\n                {/*</button>*/}\n\n\n                <div style={{display: \"flex\"}}>\n                    <input type=\"text\"\n                           onChange={e => setAddress(e.target.value)}/>\n\n                    <button className=\"btn btn-sm float-right\"\n                            onClick={saveButtonClick}> ✅\n                    </button>\n\n                    <button className=\"btn btn-sm float-right\"\n                            onClick={cancelButtonClick}> ❎\n                    </button>\n\n                </div>\n\n            </div>\n\n            :\n            <div className = 'text-md-left'\n                 onDoubleClick={onEditMode}>\n\n                <div>Street: {props.user.address.street} </div>\n                <div>Suite: {props.user.address.suite} </div>\n                <div>City: {props.user.address.city} </div>\n                <div>Zip: {props.user.address.zipcode} </div>\n                <div>Geo: {props.user.address.geo.lat}, {props.user.address.geo.lng} </div>\n\n            </div>\n\n        }\n\n    </div>\n\n);\n}\n\nexport default Address;\n","import React, {useState} from 'react';\n\n\nfunction PhoneList (props) {\n    const [phone, setPhone] = useState(props.user.phone);\n    const [editMode, setEditMode] = useState(false)\n\n    const onEditMode = () => {\n        setPhone(props.user.phone);\n        setEditMode(true);\n    }\n    const saveButtonClick = () => {\n        props.saveEdited(props.user.id, {...props.user, phone: phone});\n        setEditMode(false);\n    };\n\n    const cancelButtonClick = () => {\n        setEditMode(false);\n    }\n\n\n\n\n\n    return (\n\n            !editMode ?\n                <div style={{display: 'flex'}}>\n                    {props.user.phone}\n\n                    <button className=\"btn btn-sm float-right\"\n                            style={{marginLeft: \"auto\"}}\n                            onClick={onEditMode}>\n\n                        <svg className=\"bi bi-pencil\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                             xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fillRule=\"evenodd\"\n                                  d=\"M11.293 1.293a1 1 0 0 1 1.414 0l2 2a1 1 0 0 1 0 1.414l-9 9a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z\"/>\n                            <path fillRule=\"evenodd\"\n                                  d=\"M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 0 0 .5.5H4v.5a.5.5 0 0 0 .5.5H5v.5a.5.5 0 0 0 .5.5H6v-1.5a.5.5 0 0 0-.5-.5H5v-.5a.5.5 0 0 0-.5-.5H3z\"/>\n                        </svg>\n                    </button>\n                </div>\n                :\n                <div style={{display: \"flex\"}}>\n                    <input type=\"text\"\n                           value={phone}\n                           onChange={e => setPhone(e.target.value)}/>\n\n                    <button className=\"btn btn-sm float-right\"\n                            onClick={saveButtonClick}> ✅ </button>\n\n                    <button className=\"btn btn-sm float-right\"\n                            onClick={cancelButtonClick}> ❎ </button>\n\n                </div>\n\n\n\n\n\n    );\n}\n\n\nexport default PhoneList;\n","import React, {useState} from 'react';\n\n\nfunction WebsiteList (props) {\n    const [website, setWebsite] = useState(props.user.website);\n    const [editMode, setEditMode] = useState(false)\n\n    const onEditMode = () => {\n        setWebsite(props.user.website);\n        setEditMode(true);\n    };\n    const saveButtonClick = () => {\n        props.saveEdited(props.user.id, {...props.user, website: website});\n        setEditMode(false);\n    };\n\n    const cancelButtonClick = () => {\n        setEditMode(false);\n    }\n\n\n\n\n    return (\n        <td>\n            {(!editMode) ?\n                <div style={{display: 'flex'}}>\n                    {props.user.website}\n\n                    <button className=\"btn btn-sm float-right\"\n                            style={{marginLeft: \"auto\"}}\n                            onClick={onEditMode}>\n\n                        <svg className=\"bi bi-pencil\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                             xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fillRule=\"evenodd\"\n                                  d=\"M11.293 1.293a1 1 0 0 1 1.414 0l2 2a1 1 0 0 1 0 1.414l-9 9a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z\"/>\n                            <path fillRule=\"evenodd\"\n                                  d=\"M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 0 0 .5.5H4v.5a.5.5 0 0 0 .5.5H5v.5a.5.5 0 0 0 .5.5H6v-1.5a.5.5 0 0 0-.5-.5H5v-.5a.5.5 0 0 0-.5-.5H3z\"/>\n                        </svg>\n                    </button>\n                </div>\n                :\n                <div style={{display: \"flex\"}}>\n                    <input type=\"text\"\n                           value={website}\n                           onChange={e => setWebsite(e.target.value)}/>\n\n                    <button className=\"btn btn-sm float-right\"\n                            onClick={saveButtonClick}> ✅ </button>\n\n                    <button className=\"btn btn-sm float-right\"\n                            onClick={cancelButtonClick}> ❎ </button>\n\n                </div>\n            }\n\n        </td>\n\n\n    );\n}\n\nexport default WebsiteList;\n","import React from 'react';\n\n\nfunction Company(props) {\n\n    return (\n       <div className='text-sm-left'>\n\n            <div>Company: {props.user.company.name} </div>\n            <div>Catch phrase: {props.user.company.catchPhrase} </div>\n            <div>BS: {props.user.company.bs} </div>\n\n       </div>\n\n    );\n}\n\nexport default Company;\n","import React, {useState} from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport NameList from \"./NameList\";\nimport UserName from \"./UserName\";\nimport EmailList from \"./EmailList\";\nimport Address from \"./Address\";\nimport PhoneList from \"./PhoneList\";\nimport WebsiteList from \"./WebsiteList\";\nimport Company from \"./Company\";\n\n\nfunction App() {\n    const [users, setUsers] = useState([])\n\n\n\n\n    const loadUsers = () => {\n        console.log('Load')\n\n\n        axios({\n            method: 'get',\n            url: 'https://jsonplaceholder.typicode.com/users',\n        })\n            .then((response) => {\n                console.log(response)\n                setUsers(response.data);\n\n            });\n    };\n\n    const saveEdited = (userId, editedUser) => {\n        const editedUsers = users.map(user => {\n            if (user.id === userId) {\n                return editedUser }\n            else return user;\n        });\n        setUsers(editedUsers);\n    };\n\n\n    //  Cпособ 1\n    //   fetch('https://jsonplaceholder.typicode.com/users')\n    //       .then(response => response.json())\n    //       .then(json => {\n    //           setUsers(json);\n    //       }\n    //       );\n    // };\n    //fetch returns promise. Promise it is not Java Script.\n    // Promise - code который мы не знаем когда выполнится () это функция. Они выполняются тогда, когда она разрешаеться\n\n\n    return (\n\n        <div className='App'>\n            <h1>Users Database</h1>\n            <button className='btn btn-primary mb-3'\n                    onClick={loadUsers}>Load users\n            </button>\n\n            {/*{*/}\n            {/*    users.map(el => <li key={el.id}>{el.name}</li>)*/}\n            {/*}*/}\n\n\n            <table className=\"table table-striped table-bordered\">\n                {\n                    users.length !== 0 &&\n                <thead className='thead-dark'>\n                <tr>\n\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Name</th>\n                    <th scope=\"col\">Username</th>\n                    <th scope=\"col\">Email</th>\n                    <th scope=\"col\">Address</th>\n                    <th scope=\"col\">Phone</th>\n                    <th scope=\"col\">Website</th>\n                    <th scope=\"col\">Company</th>\n\n                </tr>\n                </thead>\n                }\n\n                <tbody>\n                    {\n                        users.map(user =>\n                            <tr key={user.id}>\n                                <td>{user.id}</td>\n\n                                <td><NameList columnName='name'\n                                          user={user}\n                                          saveEdited={saveEdited}/></td>\n                                <td> <UserName columnName='username'\n                                           user={user}\n                                           saveEdited={saveEdited}/></td>\n                                <td> <EmailList columnName='email'\n                                          user={user}\n                                           saveEdited={saveEdited}/></td>\n                                <td><Address columnName='address'\n                                           user={user}\n                                         saveEdited={saveEdited}/></td>\n                                <td><PhoneList columnName='phone'\n                                         user={user}\n                                           saveEdited={saveEdited}/></td>\n                                <td> <WebsiteList columnName='website'\n                                           user={user}\n                                             saveEdited={saveEdited}/></td>\n                                <td><Company columnName='company'\n                                             user={user}\n                                         saveEdited={saveEdited}/></td>\n                            </tr>\n                        )\n                    }\n            </tbody>\n        </table>\n\n\n</div>\n);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}